#!/usr/bin/perl
#Dependencies:
#dd
#losetup
#mkdir
#mount
#debootstrap
#umount
#rmdir

use strict;
use warnings;
use Getopt::Long;
Getopt::Long::Configure ('bundling');

#Check to make sure user is root
my $user = `whoami`;
chomp $user;
if($user ne 'root'){
  print 'Superuser privileges are necessary for some parts of this script; ';
  print 'use sudo.' . "\n";
  exit(1);
}

#General
my $verbose = 0;
my $help;
my $count = 4;
my $location = './';
my $img_name = 'test';

#Debootstrap Options
my $arch = 'i686';
my $apt_include = 'bonnie++';
my $distro = 'gutsy';
my $mirror = 'http://archive.ubuntu.com/ubuntu';


#DD Config Options
my $dd_bs = 1;
my $dd_count = 1;
my $dd_seek = 1;

GetOptions ('c|count=i' =>\$count,
            'a|arch=s' => \$arch,
            'd|distro=s' => \$distro,
            'l|location=s' => \$location,
            'n|name=s' => \$img_name,
            'm|mirror=s' => \$mirror,
            'ddbs=i' => \$dd_bs,
            's|ddseek=i' => \$dd_seek,
            'h|help' => \$help,
            'v' => $verbose);

# Display help
if($help || ($#ARGV+1) != 1){
  print 'Usage: [options] imagename' . "\n";
  print "  -c [count], --count [count]\t\t\tNumber of IMGs to Create\n";
  print "  -a [arch], --arch [arch]\t\t\tArchitecture to Install\n";
  print "  -d [distro], --distro [distro]\t\tDistro to Install\n";
  print "  -l [location], --location [location]\t\tLocation to Create IMGs at\n";
  print "  -m [mirror], --mirror [mirror]\t\tMirror to Intall from\n";
  print "  --ddbs [size]\t\t\t\t\tBS for DD command\n";
  print "  --ddcount [count]\t\t\t\tCount for DD command\n";
  print "  -s [count], --ddseek [count]\t\t\tSeek for DD command\n";
  print "  -h --help\t\t\t\t\tThis.\n";
  print "  -v \t\t\t\tverbose\n";
  exit(1);
}
$img_name = $ARGV[0];

#################
#  Subroutines  #
#################

my $logfilename="creator.log.$img_name";
open(LOGFILE, ">$logfilename") or die("Unable to open logfile: $logfilename");

sub log_info {
  print LOGFILE "$_[0]\n";
  print "$_[0]\n";
}

sub log_fatal {
  print LOGFILE "$_[0]\n";
  die("$_[0]");
}

sub ex_quiet {
  my($command,$name) = @_;
  if ($name) {
    log_info("TASK: $name");
  }
  if ($verbose) {
    log_info("COMMAND: $command");
  }
  my $ret = `$command 2>&1`;
  if ($? != 0) {
    log_info("OUTPUT: $ret\n");
    log_fatal("ERROR: Return Code $?\n");
  }
  return $ret;
}

sub ex_verbose {
  my($command,$name) = @_;
  if ($name) {
    log_info("TASK: $name");
  }
  if ($verbose) { 
    log_info("COMMAND: $command");
  }
  system("$command");
  if ($? != 0) {
    log_fatal("ERROR: Return Code $?");
  }
}

#################
#    Assemble   #
#################

#make initial dd
my $dd_command = 'dd if=/dev/zero of=' . $location . $img_name . '.img ' . 
              'bs=' . $dd_bs . 'K count=' . $dd_count . ' seek=' . $dd_seek;

#loopback mount dd
my $dev_device = `losetup -f`;
chomp($dev_device);
my $losetup_command = 'losetup ' . $dev_device . ' ' . $location . $img_name . 
                   '.img';

#format
my $format_command = 'mkfs.ext3 ' . $dev_device;

#mkdir and mount
my $mkdir_command = 'mkdir ' . $location . $img_name;
my $mount_command = 'mount ' . $dev_device . " " . $location . 
                 $img_name;

#debootstrap
my $debootstrap_command = 'debootstrap --arch ' . $arch . ' --include=' . 
                       $apt_include . ' ' . $distro . ' ' . 
                       $location . $img_name . ' ' . $mirror;

#umount
my $umount_command = 'umount ' . $location . $img_name;

#rmdir
my $rmdir_command = 'rmdir ' . $location . $img_name;

#ulosetup
my $ulosetup_command = 'losetup -d ' . $dev_device;

#?!?!?!? To copy as .img or all files ?!?!?!?!?!
#copy (whole .img for now)
my @copy_command;
for (my $i=1; $i<$count; $i++){
  push(@copy_command, 'cp ' . $location . $img_name . '.img ' . $location . 
                      $img_name . '_' . $i . '.img');
}

###########
#   Run   #
###########
ex_quiet
print 'CREATOR: dd-ing...' . "\n";
(system($dd_command) == 0) or die ("dd failed ($?)");

print 'CREATOR: losetup-ing...' . "\n";
(system($losetup_command) == 0) or die ("losetup failed ($?)");

print 'CREATOR: mkfs.ext3-ing...' . "\n";
(system($format_command) == 0) or die ("format failed ($?)");

print 'CREATOR: mkdir-ing...' . "\n";
(system($mkdir_command) == 0) or die ("mkdir failed ($?)");

print 'CREATOR: mount-ing...' . "\n";
(system($mount_command) == 0) or die ("mount failed ($?)");

print 'CREATOR: debootstrap-ing...' . "\n";
(system($debootstrap_command) == 0) or die ("debootstrap failed ($?)");

print 'CREATOR: umount-ing...' . "\n";
(system($umount_command) == 0) or die ("umount failed ($?)");
  
print 'CREATOR: rmdir-ing...' . "\n";
(system($rmdir_command) == 0) or die ("rmdir failed ($?)");

print 'CREATOR: ulosetup-ing...' . "\n";
(system($ulosetup_command) == 0) or die ("ulosetup failed ($?)");

foreach (@copy_command) {
  print 'CREATOR: copy-ing...' . "\n";
  (system($_) == 0) or die ("copy failed ($?)");
}  


